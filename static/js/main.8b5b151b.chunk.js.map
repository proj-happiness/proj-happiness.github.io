{"version":3,"sources":["utils/questionnaire.js","utils/messages.js","components/Header.js","pages/BasicInformation.js","pages/Home.js","utils/ProcessResult.js","pages/Process.js","pages/Result.js","components/TestItems.js","pages/Test.js","App.js","index.js"],"names":["exports","questionnaire","questionNumber","questionText","questionType","messages","id","type","message","Header","className","BasicInformation","testAnswers","setBasicInfo","navigate","useNavigate","useState","givenName","setGivenName","age","setAge","email","setEmail","useEffect","length","onSubmit","e","preventDefault","placeholder","value","onChange","target","required","pattern","onClick","Home","to","ProcessResult","data","this","introvertPercentage","undefined","eitherPercentage","extrovertPercentage","biggerPercentage","solveEither","solveIntrovert","Math","max","filter","item","answer","filterIntrovert","filterEither","Process","basicInfo","setResult","processing","setIsProcessing","result","setTimeout","state","status","Result","useLocation","personalityType","alert","templateParams","to_name","from_name","introPer","extroPer","omniPer","emailjs","send","then","catch","err","introvertBar","width","backgroundColor","padding","textAlign","borderRadius","extrovertBar","omnivertBar","style","toLowerCase","labelStyle","TestItems","question","handleAnswer","handleChange","name","Test","setTestAnswers","setFormData","userAnswers","setUserAnswers","ansIndex","findIndex","prev","map","index","href","App","basicInformation","setBasicInformation","formData","exact","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b5b151b.chunk.js","sourcesContent":["exports.questionnaire = [\n    {\n        questionNumber: 1,\n        questionText: \"I do my best work on my own.\",\n        questionType: \"introvert\",\n    },\n    {\n        questionNumber: 2,\n        questionText: \"I like to celebrate birthdays on a small scale, with only one or two close friends or family members only.\",\n        questionType: \"introvert\",\n    },\n    {\n        questionNumber: 3,\n        questionText: \"I enjoy solitude.\",\n        questionType: \"introvert\",\n    },\n    {\n        questionNumber: 4,\n        questionText: \"I prefer one-on-one than group activities.\",\n        questionType: \"introvert\",\n    },\n    {\n        questionNumber: 5,\n        questionText: \"I seem to care about wealth, fame, and status less than my peers.\",\n        questionType: \"introvert\",\n    },\n    {\n        questionNumber: 6,\n        questionText: \"I like to talk things out with others.\",\n        questionType: \"extrovert\",\n    },\n    {\n        questionNumber: 7,\n        questionText: \"I decide or dive immediately.\",\n        questionType: \"extrovert\",\n    },\n    {\n        questionNumber: 8,\n        questionText: \"I like public acknowledgements\",\n        questionType: \"extrovert\",\n    },\n    {\n        questionNumber: 9,\n        questionText: \"I enjoy being the center of attention.\",\n        questionType: \"extrovert\",\n    },\n    {\n        questionNumber: 10,\n        questionText: \"I am an excellent communicator.\",\n        questionType: \"extrovert\",\n    },\n]","exports.messages = [\n  {\n    id: 1,\n    type: \"introvert\",\n    message: \"The best way to be a happy introvert is to be aware of your feelings and emotions, to act flexibly in response to your current needs, and to actively work towards happiness in whatever way best suits your set-point personality, authentic interests, and deep-seated values.\",\n  },\n  {\n    id: 2,\n    type: \"extrovert\",\n    message: \"Extroverts are happiest when they are socially surrounded by other people, they are happiest when they are doing rewarding activities (such as closing a deal or winning a game) and they tend to stay happy longer after a pleasurable activity.\",\n  },\n  {\n    id: 3,\n    type: \"omnivert\",\n    message: \"You can be happy in both quiet and reserved situations, as well as loud and outgoing situations. To recharge your other side, you must choose one at a time.\",\n  },\n];\n","function Header() {\n  return (\n    <div className=\"max-w-xl bg-yellow-900 text-yellow-50 p-4 rounded-3xl\">\n      <p>\n        <strong>Please fill out the form truthfully.</strong>\n      </p>\n      <p>\n        <em>\n          NOTE: Data is collected for research purposes only and will\n          never be used for activities such as data mining.\n        </em>\n      </p>\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Header from \"../components/Header\";\n\nfunction BasicInformation({testAnswers, setBasicInfo}) { \n  const navigate = useNavigate();\n  const [givenName, setGivenName] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n\nuseEffect(() => {\n    if(testAnswers.length !== 10){\n      navigate(\"/\");\n    }\n}, [testAnswers.length])\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setBasicInfo({\n            givenName,\n            age,\n            email\n        });\n        navigate(\"/process\");\n    }\n\n  return (\n    <form className=\"max-w-full h-full bg-yellow-100\" onSubmit={handleSubmit}>\n      <Header />\n\n      <div className=\"container p-4 bg-yellow-100 max-w-xl flex flex-col gap-4\">\n        <label className=\"flex flex-col gap-2\">\n          Given Name\n          <input\n            type=\"text\"\n            className=\"w-full py-2 px-4 rounded-lg\"\n            placeholder=\"ex. Andrew\"\n            value={givenName}\n            onChange={(e) => setGivenName(e.target.value)}\n            required\n          />\n        </label>\n        <label className=\"flex flex-col gap-2\">\n          Email\n          <input\n            type=\"email\"\n            className=\"w-full py-2 px-4 rounded-lg\"\n            placeholder=\"ex. user@example.com\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n          />\n        </label>\n        <label className=\"flex flex-col gap-2\">\n          Age\n          <input\n            type=\"text\"\n            className=\"w-full py-2 px-4 rounded-lg\"\n            placeholder=\"ex. 18\"\n            value={age}\n            pattern=\"[0-9]*\"\n            onChange={(e) => setAge(e.target.value)}\n            required\n          />\n        </label>\n      </div>\n      <div className=\"w-full flex flex-row justify-around\">\n        <button onClick={() => navigate(-1)}>Back</button>\n        <button\n          className=\"py-2 px-4 bg-yellow-900 text-yellow-50 rounded-md\"\n          type=\"submit\"\n        >\n          Submit\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default BasicInformation;\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nfunction Home() {\n    return (\n        <div className=\"w-full h-full p-4 gap-4 bg-yellow-100 flex flex-col justify-center items-center\">\n            <h1 className=\"text-center font-bold text-2xl\">Welcome to Project <span className=\"bg-yellow-400 text-yellow-50 px-1 rounded-md\">Happiness!</span></h1>\n            <p className=\"text-sm\">Our project is a test that will show you the way to happiness. This project will assist students in determining which path to take in order to find authentic happiness, according to participants personality type, such as introvert, extrovert, or omnivert.</p>\n\n            <Link to=\"/test\" className=\"bg-yellow-900 text-yellow-50 text-center w-9/12 py-1 rounded-md\">Start</Link>\n        </div>  \n    )\n}\n\nexport default Home\n","export default class ProcessResult{\n    constructor(data){\n        this.data = data;\n        this.introvertPercentage = undefined;\n        this.eitherPercentage = undefined;\n        this.extrovertPercentage = undefined;   \n        this.biggerPercentage = undefined;\n        (\n            () => {\n                this.eitherPercentage = this.solveEither();\n                this.introvertPercentage = this.solveIntrovert();\n                this.extrovertPercentage = 100 - this.eitherPercentage - this.introvertPercentage;\n            \n                this.biggerPercentage = Math.max(this.eitherPercentage, this.introvertPercentage, this.extrovertPercentage);\n            }\n        )();\n    }\n\n    filterIntrovert(){\n        return this.data.filter(item => item.answer === 'extrovert-no' || item.answer === 'introvert-yes');\n    }\n    filterEither(){\n    return this.data.filter(item => item.answer === 'introvert-either' || item.answer === 'extrovert-either');\n    }\n    solveIntrovert(){\n        return (this.filterIntrovert().length / 10) * 100;\n    }\n    solveEither(){\n        return ((this.filterEither().length / 10) * 100)/2;\n    }\n}","import React, { useEffect, useState } from 'react';\nimport {useNavigate} from 'react-router-dom';\nimport ProcessResult from '../utils/ProcessResult';\n\nfunction Process({ testAnswers, basicInfo, setResult }) {\n\n    const navigate = useNavigate();\n    const [processing, setIsProcessing] = useState(true);\n    useEffect(() => {\n        if(!basicInfo || testAnswers.length !== 10){\n            navigate('/');\n        }\n\n        const result = new ProcessResult(testAnswers);\n        setTimeout(() => {\n            setResult(result);\n            setIsProcessing(false);\n        }, 2000);\n    },[]);\n\n    useEffect(() => {\n        if(!processing){\n            navigate('/results', {\n                state: {\n                    status: 'processed'\n                }\n            });\n        }\n    }, [processing])\n\n    return (\n        <pre>Processing...</pre>\n    )\n}\n\nexport default Process\n","import React, { useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport emailjs from \"emailjs-com\";\nimport { messages } from \"../utils/messages\";\nfunction Result({ result, basicInfo }) {\n  const { givenName, email, age } = basicInfo;\n  const navigate = useNavigate();\n  const { state } = useLocation();\n  const personalityType =\n    result.biggerPercentage === result.introvertPercentage\n      ? \"Introvert\"\n      : result.biggerPercentage === result.extrovertPercentage\n      ? \"Extrovert\"\n      : \"Omnivert\";\n\n\n  useEffect(() => {\n    if (!state.status === \"processed\" || !state || result.data === undefined) {\n      alert(\"Finish the test first!\");\n      return navigate(\"/test\");\n    }\n    else{\n        const templateParams = {\n            to_name: \"Ms. January\",\n            from_name: givenName,\n            personalityType,\n            email,\n            age,\n            introPer: result.introvertPercentage,\n            extroPer: result.extrovertPercentage,\n            omniPer: result.eitherPercentage,\n          };\n          emailjs\n            .send(\n              \"service_tjoanwn\",\n              \"template_7hai2gb\",\n              templateParams,\n              \"user_rUdMwOGPrvRmRGyIaV0Nz\"\n            )\n            .then(() => {\n              alert(\"Thank you for participating this project!\");\n            })\n            .catch((err) => {\n              alert(err.message);\n            });\n    }\n  }, []);\n\n  const introvertBar = {\n    width: `${result.introvertPercentage}%`,\n    backgroundColor: \"rgba(180, 83, 9, .8)\",\n    padding: \".5rem .3rem\",\n    textAlign: \"center\",\n    borderRadius: \"0.375rem\",\n  };\n  const extrovertBar = {\n    width: `${result.extrovertPercentage}%`,\n    backgroundColor: \"rgba(245, 158, 11, .8)\",\n    padding: \".5rem .3rem\",\n    textAlign: \"center\",\n    borderRadius: \"0.375rem\",\n  };\n  const omnivertBar = {\n    width: `${result.eitherPercentage}%`,\n    backgroundColor: \"rgba(252, 211, 77, .8)\",\n    padding: \".5rem .3rem\",\n    textAlign: \"center\",\n    borderRadius: \"0.375rem\",\n  };\n\n  return (\n    <div className=\"container max-w-full p-4 bg-yellow-100 flex flex-col\">\n      {/* Header */}\n\n      <div className=\"p-4\">\n        <h1 className=\"text-2xl text-center text-yellow-900\">\n          Results just for you, {givenName}!\n        </h1>\n      </div>\n\n      {/* Chart */}\n      <div className=\"container w-full flex flex-col justify-center items-center gap-2\">\n        <div className=\"w-9/12 border-2 border-black rounded-md\">\n          <div className=\"text-xs\" style={introvertBar}>\n            Introvert: {result.introvertPercentage}%\n          </div>\n        </div>\n        <div className=\"w-9/12 border-2 border-black rounded-md\">\n          <div className=\"text-xs\" style={extrovertBar}>\n            Extrovert: {result.extrovertPercentage}%\n          </div>\n        </div>\n        <div className=\"w-9/12 border-2 border-black rounded-md\">\n          <div className=\"text-xs\" style={omnivertBar}>\n            Omnivert: {result.eitherPercentage}%\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container p-4 text-md text-center flex flex-col gap-2\">\n        <h2 className=\"text-yellow-900\">Your personality type is:</h2>\n        <h1>{personalityType}</h1>\n\n        <p className=\"text-left text-yellow-900\">\n          {\n            messages.filter(\n              (message) => message.type === personalityType.toLowerCase()\n            )[0].message\n          }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Result;\n","function TestItems({ questionNumber, question, type, handleAnswer }) {\n  const handleChange = (e) => {\n    const answer = {\n      id: questionNumber,\n      answer: e.target.value,\n    };\n    handleAnswer(answer);\n  };\n\n  return (\n    <div className=\"container p-4 bg-yellow-100 max-w-xl flex flex-col\">\n      <div className=\"w-full\">\n        {/* Here goes question text */}\n        <p>\n          {questionNumber}.) {question}\n        </p>\n      </div>\n      <div className=\"w-full flex flex-col p-2 gap-2\">\n        {/* Here goes choices */}\n        <label className={labelStyle}>\n          <input\n            type=\"radio\"\n            name={questionNumber}\n            value={type + \"-yes\"}\n            onChange={handleChange}\n          />\n          Yes\n        </label>\n        <label className={labelStyle}>\n          <input\n            type=\"radio\"\n            name={questionNumber}\n            value={type + \"-no\"}\n            onChange={handleChange}\n          />\n          No\n        </label>\n        <label className={labelStyle}>\n          <input\n            type=\"radio\"\n            name={questionNumber}\n            value={type + \"-either\"}\n            onChange={handleChange}\n          />\n          Either\n        </label>\n      </div>\n    </div>\n  );\n}\nconst labelStyle = \"p-2 bg-yellow-50 rounded-md flex gap-2 weight\"\nexport default TestItems;\n","import { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport TestItems from \"../components/TestItems\";\nimport Header from \"../components/Header\";\nimport { questionnaire } from \"../utils/questionnaire\";\n\nfunction Test({testAnswers, setTestAnswers, setFormData}) {\n\n    const navigate = useNavigate();\n  // we store answers in an array\n  const [userAnswers, setUserAnswers] = useState([]);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // we check if the user has answered all questions\n    if (userAnswers.length === questionnaire.length){\n        setTestAnswers(userAnswers);\n        setFormData(e.target)\n        navigate(\"/lastStep\");\n    }\n    else{\n      alert(\"Please answer all questions.\");\n    }\n  }\n  const handleAnswer = (answer) => {\n    const { id } = answer;\n    const ansIndex = userAnswers.findIndex((item) => item.id === id);\n\n    if (ansIndex === -1) {\n      return setUserAnswers([...userAnswers, answer]);\n    }\n\n    return setUserAnswers((prev) => {\n      prev[ansIndex].answer = answer.answer;\n      return [...prev];\n    });\n  };\n\n  return (\n    <form className=\"max-w-full h-auto gap-4 bg-yellow-100\" onSubmit={handleSubmit}>\n      <Header />\n      {questionnaire.map((item, index) => (\n        <TestItems\n          key={index}\n          questionNumber={item.questionNumber}\n          question={item.questionText}\n          type={item.questionType}\n          handleAnswer={handleAnswer}\n        />\n      ))}\n\n      <div className=\"w-full flex flex-row justify-around\">\n        <a href=\"/\"\n          className=\"px-4 py-1 bg-yellow-100 border-2 rounded-md\"\n        >\n          Cancel\n        </a>\n        <button\n          className=\"px-4 py-1 bg-yellow-900 rounded-md text-yellow-50\"\n          type=\"submit\"\n        >\n          Next\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default Test;\n","import { useState } from 'react';\nimport { Routes, Route } from 'react-router';\nimport BasicInformation from './pages/BasicInformation';\nimport Home from './pages/Home';\nimport Process from './pages/Process';\nimport Result from './pages/Result';\nimport Test from './pages/Test';\n\nfunction App() {\n\n    const [testAnswers, setTestAnswers] = useState([]);\n    const [ basicInformation, setBasicInformation ] = useState({});\n    const [ result, setResult ] = useState({});\n    const [ formData, setFormData ] = useState({});\n    return (    \n        <div className=\"container flex justify-center items-start w-full h-screen\">\n            {/* <Test testAnswers={testAnswers} setTestAnswers={setTestAnswers} /> */}\n            <Routes>\n                <Route exact path=\"/\" element={<Home />} />\n                <Route path=\"/test\" element={<Test testAnswers={testAnswers} setTestAnswers={setTestAnswers} setFormData={setFormData}/>} />\n                <Route path=\"/lastStep\" element={<BasicInformation testAnswers={testAnswers} setBasicInfo={setBasicInformation}/>} />\n                <Route path=\"/process\" element={<Process testAnswers={testAnswers} basicInfo={basicInformation} setResult={setResult}/>} />\n                <Route path=\"/results\" element={<Result testAnswers={testAnswers} result={result} basicInfo={basicInformation} formData={formData}/>} />\n            </Routes>\n        </div>\n    )   \n}\n\nexport default App\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport {  BrowserRouter } from \"react-router-dom\";\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}